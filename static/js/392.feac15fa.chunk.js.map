{"version":3,"file":"static/js/392.feac15fa.chunk.js","mappings":"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","sources":["components/Phonebook/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Phonebook/ContactItem/ContactItem.module.css?fb47","components/Phonebook/ContactItem/ContactItem.jsx","components/Phonebook/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Phonebook/Filter/Filter.module.css?44e1","components/Phonebook/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Phonebook/Phonebook.module.css?3a02","components/Phonebook/Phonebook.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Phonebook/ContactForm/ContactForm.module.css?f727","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { addContact } from '../../../redux/contacts/contactsOperations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from '../ContactForm/ContactForm.module.css'\nimport { Loader } from '../Loader/Loader';\n\nexport const ContactForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        \n        switch (name) {\n            case 'contactName':\n                setName(value)\n                break;\n            case 'contactNumber':\n                setNumber(value)\n                break;\n            default:\n                setName('')\n                setNumber('')\n        }\n    }\n\n    const dispatch = useDispatch();\n    const {items, addingLoader} = useSelector(getContacts);\n\n    const contactAlreadyExists = (name, number) => {\n        return items.find((item) => item.name.toLocaleLowerCase() === name.toLocaleLowerCase());\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (contactAlreadyExists(name, number)) {\n            return toast.error(`${name} is already in Phonebook`)\n        }\n\n        dispatch(addContact({name, number}));\n\n        setName('')\n        setNumber('')\n    }\n\n    const nameId = nanoid();\n    const numberId = nanoid();\n    \n    return (<form onSubmit={handleSubmit} className={styles.insertWrapper}>\n        <label className={styles.label} htmlFor={nameId}>Name</label>\n        <input\n            id={nameId}\n            type=\"text\"\n            name=\"contactName\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder='Input name'\n            className={styles.input} />\n        <label className={styles.label} htmlFor={numberId}>Number</label>\n        <input\n            id={numberId}\n            type=\"tel\"\n            name=\"contactNumber\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n                placeholder='Input number'\n            className={styles.input} />\n        {addingLoader ?\n            <Loader/> :\n            <button type='submit' className={styles.button}>Add contact</button>\n        }\n    </form>)\n}","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__Pnk5T\",\"contactText\":\"ContactItem_contactText__Unqs0\",\"contactBtn\":\"ContactItem_contactBtn__JQaBo\",\"loader\":\"ContactItem_loader__p4N9I\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { removeContact } from '../../../redux/contacts/contactsOperations';\nimport styles from '../ContactItem/ContactItem.module.css';\n\nexport const ContactItem = ({ data }) => {\n  const dispatch = useDispatch();\n\n  const { id, name, number } = data;\n\n  const onDeleteClick = (e, id) => {\n    if (id === e.target.id) {\n      e.target.textContent = 'Deleting...';\n      e.target.setAttribute('disabled', 'true');\n    }\n    dispatch(removeContact(id));\n  };\n  return (\n    <>\n      <li className={styles.contactItem}>\n        <p className={styles.contactText}>\n          {name}: {number}\n        </p>\n        <button\n          type=\"button\"\n          className={styles.contactBtn}\n          id={id}\n          onClick={e => onDeleteClick(e, id)}\n        >\n          Delete\n        </button>\n      </li>\n    </>\n  );\n  //         return (\n  //      <>\n  //   {' '}\n  //   {contactsToRender.length > 0 ? (\n  //             <table className={s.table}>\n  //                 {error && <div>Something went wrong, please, try again</div>}\n  //       <thead>\n  //         <tr>\n  //           <th className={s.thead}>№</th>\n  //           <th className={s.thead}>Name</th>\n  //           <th className={s.thead}>Number</th>\n  //           <th className={s.thead}>Options</th>\n  //         </tr>\n  //       </thead>\n  //       <tbody>\n  //         {contactsToRender.map((item, index) => (\n\n  //           <tr key={item.id}>\n  //             <td className={s.data}>{index + 1}</td>\n  //             <td className={s.data}>{item.name}</td>\n  //             <td className={s.data}>{item.number}</td>\n  //             <td className={s.data}>\n  //               <button type='button' className={styles.contactBtn} id={id} onClick={(e) => onDeleteClick(e, id)}>Delete</button>\n  //             </td>\n  //           </tr>\n  //         ))}\n  //                 </tbody>\n  //                 {isLoading && <div>Loading...</div>}\n  //     </table>\n  //   ) : (\n  //     <p className={s.empty}>No contacts</p>\n  //   )}\n  // </>\n  // );\n};\n\nContactItem.propTypes = {\n  data: PropTypes.objectOf(PropTypes.string.isRequired),\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../../../redux/contacts/contactsOperations';\nimport { getContacts } from '../../../redux/contacts/contactsSlice';\nimport { getFilter } from '../../../redux/filter/filterSlice';\nimport { ContactItem } from '../ContactItem/ContactItem';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const { items, error, isLoading } = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const getFilteredContacts = () => {\n    if (!filter) {\n      return items;\n    }\n    return items.filter(({ name }) =>\n      name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n    );\n  };\n\n  const contactsToRender = getFilteredContacts();\n\n  return (\n    <>\n      {' '}\n      {contactsToRender.length > 0 ? (\n        <ul style={{ paddingLeft: '0px' }}>\n          {isLoading ? (\n            <div>Loading...</div>\n          ) : (\n            contactsToRender.map(item => (\n              <ContactItem key={item.id} data={item} />\n            ))\n          )}\n          {error && <div>Something went wrong, please, try again</div>}\n        </ul>\n      ) : (\n        <p>No contacts</p>\n      )}\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterWrapper\":\"Filter_filterWrapper__-LBgt\",\"label\":\"Filter_label__hOULN\",\"input\":\"Filter_input__8EywS\"};","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport styles from '../Filter/Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../../redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(state => state.filter);\n  \n  const handleChange = (e) => {\n    dispatch(setFilter(e.target.value));\n  }\n  \n  const filterId = nanoid();\n\n  return (<div className={styles.filterWrapper}>\n    <label htmlFor={filterId} className={styles.label}>Find contacts by name</label>\n    <input\n      id={filterId}\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={handleChange}\n      className={styles.input}\n      placeholder='Input name' />\n  </div>);\n};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Phonebook_title__ipARL\"};","import { ContactForm } from './ContactForm/ContactForm';\nimport { ContactList } from './ContactList/ContactList';\nimport { Filter } from './Filter/Filter';\nimport css from './Phonebook.module.css'\n\nconst Phonebook = () => {\n    return <>\n        <h1 className={css.title}>Phonebook</h1>\n        <ContactForm />\n\n        <h2 className={css.title}>Contacts</h2>\n        <Filter />\n        <ContactList />\n    </>\n}\n\nexport default Phonebook","// extracted by mini-css-extract-plugin\nexport default {\"insertWrapper\":\"ContactForm_insertWrapper__ZCraW\",\"label\":\"ContactForm_label__YXYvo\",\"input\":\"ContactForm_input__dxiTT\",\"button\":\"ContactForm_button__nVfZI\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactForm","useState","name","setName","number","setNumber","handleChange","e","target","value","dispatch","useDispatch","useSelector","getContacts","items","addingLoader","nameId","nanoid","numberId","onSubmit","preventDefault","find","item","toLocaleLowerCase","contactAlreadyExists","toast","addContact","className","styles","htmlFor","id","type","onChange","pattern","title","required","placeholder","Loader","ContactItem","data","onClick","textContent","setAttribute","removeContact","onDeleteClick","ContactList","useEffect","fetchContacts","error","isLoading","filter","getFilter","contactsToRender","includes","length","style","paddingLeft","map","Filter","state","filterId","setFilter","css","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}